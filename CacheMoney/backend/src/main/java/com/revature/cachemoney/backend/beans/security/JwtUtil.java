package com.revature.cachemoney.backend.beans.security;

import java.util.Date;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTCreationException;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;

import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

/**
 * Utility for creating & validating JSON Web Tokens (JWTs).
 * 
 * @author Ibrahima Diallo, Brian Gardner, Cody Gonsowski, & Jeffrey Lor
 */
@Data
@NoArgsConstructor
@Component
public class JwtUtil {

    @Value("${security.jwt.expiration:}")
    private int expiration;

    @Value("${security.jwt.secret:}")
    private String secret;

    @Value("${security.issuer:}")
    private String issuer;

    @Value("${security.jwt.user:}")
    private String user;

    /**
     * Generate JWT for user trying to create a token.
     * 
     * @param userId associated with user trying to create token
     * @return JWT that contains verification information
     * @throws IllegalArgumentException If JWT is malformed
     * @throws JWTCreationException if any error occur
     */
    public String generateToken(Integer userId) throws IllegalArgumentException, JWTCreationException {
        return JWT.create()
                .withIssuer(this.issuer)
                .withClaim(this.user, userId)
                .withIssuedAt(new Date())
                .withExpiresAt(new Date(System.currentTimeMillis() + this.expiration * 1000L))
                .sign(Algorithm.HMAC256(this.secret));
    }

    /**
     * Validates JWT.
     * 
     * @param token  token generated by our generateToken() method
     * @param userId userId associated with token
     * @return token verification success state (true | false)
     */
    public Boolean validateToken(String token, Integer userId) throws JWTVerificationException {
        // create a verifier using the same algorithm as generated token
        DecodedJWT jwt = JWT
                .require(Algorithm.HMAC256(this.secret))
                .withIssuer(this.issuer)
                .build()
                .verify(token);

        // double-check user id matches
        return jwt.getClaim(this.user).asInt().equals(userId);
    }
}

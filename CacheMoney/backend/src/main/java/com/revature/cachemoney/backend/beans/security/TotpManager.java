package com.revature.cachemoney.backend.beans.security;

import dev.samstevens.totp.code.*;
import dev.samstevens.totp.exceptions.QrGenerationException;
import dev.samstevens.totp.qr.QrData;
import dev.samstevens.totp.qr.QrGenerator;
import dev.samstevens.totp.qr.ZxingPngQrGenerator;
import dev.samstevens.totp.secret.DefaultSecretGenerator;
import dev.samstevens.totp.secret.SecretGenerator;
import dev.samstevens.totp.time.SystemTimeProvider;
import dev.samstevens.totp.time.TimeProvider;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import static dev.samstevens.totp.util.Utils.getDataUriForImage;

/**
 * Utility for creating & validating One Time Password in 2FA process.
 *
 * @author Phillip Vo, Josue Rodriguez, Prakash, Maikel Vera
 */
@Component
public class TotpManager {

    @Value("${security.issuer:}")
    private String issuer;

    /**
     * Secret Key Generator.
     *
     * @return String with the secret key for 2FA process
     */
    public String generateSecret() {
        SecretGenerator generator = new DefaultSecretGenerator();
        return generator.generate();
    }

    /**
     * Generate JWT for user trying to create a token.
     *
     * @param secret The secret key of the 2FA process for qr generator
     * @return A String witn the Url for the qr image of secret key
     * @throws QrGenerationException If any error accur in qr generator process
     */
    public String getUriForImage(String username, String secret) throws QrGenerationException {
        QrData data = new QrData.Builder()
                .label(username)
                .secret(secret)
                .issuer(this.issuer)
                .algorithm(HashingAlgorithm.SHA1)
                .digits(6)
                .period(30)
                .build();

        QrGenerator generator = new ZxingPngQrGenerator();
        byte[] imageData = new byte[0];

        //try {
            imageData = generator.generate(data);
        /*} catch (QrGenerationException e) {
           log.error("unable to generate QrCode");
        }*/

        String mimeType = generator.getImageMimeType();

        return getDataUriForImage(imageData, mimeType);
    }

    /**
     * Verify OTP.
     *
     * @param code OTP generated by Authenticate App
     * @param secret String with the secret key for validate the OTP
     * @return OTP verification success state (true | false)
     */
    public boolean verifyCode(String code, String secret) {
        TimeProvider timeProvider = new SystemTimeProvider();
        CodeGenerator codeGenerator = new DefaultCodeGenerator();
        CodeVerifier verifier = new DefaultCodeVerifier(codeGenerator, timeProvider);
        return verifier.isValidCode(secret, code);
    }
}
